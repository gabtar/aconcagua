// Pieces movements in a chess board
package board

import (
	"math/bits"
)

// Piece is the interface that has all methods for chess pieces
type Piece interface {
	Attacks(pos *Position) Bitboard
	Moves(pos *Position) Bitboard // Legal moves -> attacks - occupied by same color piece - pinned in direction
	Square() Bitboard
	Color() byte
	IsSliding() bool
}

// rays contains all rays for a given square in all possible 8 directions
// https://www.chessprogramming.org/Classical_Approach
const NORTH uint64 = 0
const NORTHEAST uint64 = 1
const EAST uint64 = 2
const SOUTHEAST uint64 = 3
const SOUTH uint64 = 4
const SOUTHWEST uint64 = 5
const WEST uint64 = 6
const NORTHWEST uint64 = 7


// rays contains all precalculated rays for a given square in all possible 8 directions
// useful with calculating attacks/moves on sliding pieces(Rook, Bishop, Queens)
// https://gekomad.github.io/Cinnamon/BitboardCalculator/
// Not sure if this is cheaper/faster than calculate them on the fly for the engine?
// NOTE -> USE layout02!!!!!!
var raysAttacks [8][64]Bitboard = [8][64]Bitboard{
	NORTH: {0x101010101010100, 0x202020202020200, 0x404040404040400, 0x808080808080800,
		0x1010101010101000, 0x2020202020202000, 0x4040404040404000, 0x8080808080808000,
		0x101010101010000, 0x202020202020000, 0x404040404040000, 0x808080808080000,
		0x1010101010100000, 0x2020202020200000, 0x4040404040400000, 0x8080808080800000,
		0x101010101000000, 0x202020202000000, 0x404040404000000, 0x808080808000000,
		0x1010101010000000, 0x2020202020000000, 0x4040404040000000, 0x8080808080000000,
		0x101010100000000, 0x202020200000000, 0x404040400000000, 0x808080800000000,
		0x1010101000000000, 0x2020202000000000, 0x4040404000000000, 0x8080808000000000,
		0x101010000000000, 0x202020000000000, 0x404040000000000, 0x808080000000000,
		0x1010100000000000, 0x2020200000000000, 0x4040400000000000, 0x8080800000000000,
		0x101000000000000, 0x202000000000000, 0x404000000000000, 0x808000000000000,
		0x1010000000000000, 0x2020000000000000, 0x4040000000000000, 0x8080000000000000,
		0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000,
		0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
		0x000000000000000, 0x000000000000000, 0x000000000000000, 0x000000000000000,
		0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	},
  NORTHEAST: {0x8040201008040200, 0x80402010080400, 0x804020100800, 0x8040201000, 0x80402000, 0x804000, 0x8000, 0,
    0x4020100804020000, 0x8040201008040000, 0x80402010080000, 0x804020100000, 0x8040200000, 0x80400000, 0x800000, 0,
    0x2010080402000000, 0x4020100804000000, 0x8040201008000000, 0x80402010000000, 0x804020000000, 0x8040000000, 0x80000000, 0,
    0x1008040200000000, 0x2010080400000000, 0x4020100800000000, 0x8040201000000000, 0x80402000000000, 0x804000000000, 0x8000000000, 0,
    0x804020000000000, 0x1008040000000000, 0x2010080000000000, 0x4020100000000000, 0x8040200000000000, 0x80400000000000, 0x800000000000, 0,
    0x402000000000000, 0x804000000000000, 0x1008000000000000, 0x2010000000000000, 0x4020000000000000, 0x8040000000000000, 0x80000000000000, 0,
    0x200000000000000, 0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
  },
	EAST: {0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0,
		0xfe << 8, 0xfc << 8, 0xf8 << 8, 0xf0 << 8, 0xe0 << 8, 0xc0 << 8, 0x80 << 8, 0,
		0xfe << 16, 0xfc << 16, 0xf8 << 16, 0xf0 << 16, 0xe0 << 16, 0xc0 << 16, 0x80 << 16, 0,
		0xfe << 24, 0xfc << 24, 0xf8 << 24, 0xf0 << 24, 0xe0 << 24, 0xc0 << 24, 0x80 << 24, 0,
		0xfe << 32, 0xfc << 32, 0xf8 << 32, 0xf0 << 32, 0xe0 << 32, 0xc0 << 32, 0x80 << 32, 0,
		0xfe << 40, 0xfc << 40, 0xf8 << 40, 0xf0 << 40, 0xe0 << 40, 0xc0 << 40, 0x80 << 40, 0,
		0xfe << 48, 0xfc << 48, 0xf8 << 48, 0xf0 << 48, 0xe0 << 48, 0xc0 << 48, 0x80 << 48, 0,
		0xfe << 56, 0xfc << 56, 0xf8 << 56, 0xf0 << 56, 0xe0 << 56, 0xc0 << 56, 0x80 << 56, 0,
	},
  SOUTHEAST: { 0, 0, 0, 0, 0, 0, 0, 0,
    0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0,
    0x204, 0x408, 0x810, 0x1020, 0x2040, 0x4080, 0x8000, 0,
    0x20408, 0x40810, 0x81020, 0x102040, 0x204080, 0x408000, 0x800000, 0,
    0x2040810, 0x4081020, 0x8102040, 0x10204080, 0x20408000, 0x40800000, 0x80000000, 0,
    0x204081020, 0x408102040, 0x810204080, 0x1020408000, 0x2040800000, 0x4080000000, 0x8000000000, 0,
    0x20408102040, 0x40810204080, 0x81020408000, 0x102040800000, 0x204080000000, 0x408000000000, 0x800000000000, 0,
    0x2040810204080, 0x4081020408000, 0x8102040800000, 0x10204080000000, 0x20408000000000, 0x40800000000000, 0x80000000000000, 0,
  },
	SOUTH: {0, 0, 0, 0, 0, 0, 0, 0,
		0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80,
		0x101, 0x202, 0x404, 0x808, 0x1010, 0x2020, 0x4040, 0x8080,
		0x10101, 0x20202, 0x40404, 0x80808, 0x101010, 0x202020, 0x404040, 0x808080,
		0x1010101, 0x2020202, 0x4040404, 0x8080808, 0x10101010, 0x20202020, 0x40404040, 0x80808080,
		0x101010101, 0x202020202, 0x404040404, 0x808080808, 0x1010101010, 0x2020202020, 0x4040404040, 0x8080808080,
		0x10101010101, 0x20202020202, 0x40404040404, 0x80808080808, 0x101010101010, 0x202020202020, 0x404040404040, 0x808080808080,
		0x1010101010101, 0x2020202020202, 0x4040404040404, 0x8080808080808, 0x10101010101010, 0x20202020202020, 0x40404040404040, 0x80808080808080,
	},
  SOUTHWEST: {0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40,
    0, 0x100, 0x201, 0x402, 0x804, 0x1008, 0x2010, 0x4020,
    0, 0x10000, 0x2010000, 0x40201, 0x80402, 0x100804, 0x201008, 0x402010,
    0, 0x1000000, 0x2010000, 0x4020100, 0x8040201, 0x10080402, 0x20100804, 0x40201008,
    0, 0x100000000, 0x201000000, 0x402010000, 0x804020100, 0x1008040201, 0x2010080402, 0x4020100804,
    0, 0x10000000000, 0x20100000000, 0x40201000000, 0x80402010000, 0x100804020100, 0x201008040201, 0x402010080402,
    0, 0x1000000000000, 0x2010000000000, 0x4020100000000, 0x8040201000000, 0x10080402010000, 0x20100804020100, 0x40201008040201,
  },
	WEST: {0, 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f,
		0, 0x100, 0x300, 0x700, 0xf00, 0x1f00, 0x3f00, 0x7f00,
		0, 0x10000, 0x30000, 0x70000, 0xf0000, 0x1f0000, 0x3f0000, 0x7f0000,
		0, 0x1000000, 0x3000000, 0x7000000, 0xf000000, 0x1f000000, 0x3f000000, 0x7f000000,
		0, 0x100000000, 0x300000000, 0x700000000, 0xf00000000, 0x1f00000000, 0x3f00000000, 0x7f00000000,
		0, 0x10000000000, 0x30000000000, 0x70000000000, 0xf0000000000, 0x1f0000000000, 0x3f0000000000, 0x7f0000000000,
		0, 0x1000000000000, 0x3000000000000, 0x7000000000000, 0xf000000000000, 0x1f000000000000, 0x3f000000000000, 0x7f000000000000,
		0, 0x100000000000000, 0x300000000000000, 0x700000000000000, 0xf00000000000000, 0x1f00000000000000, 0x3f00000000000000, 0x7f00000000000000,
	},
  NORTHWEST: {0, 0x100, 0x10200, 0x1020400, 0x102040800, 0x10204081000, 0x1020408102000, 0x102040810204000,
    0, 0x10000, 0x1020000, 0x102040000, 0x10204080000, 0x1020408100000, 0x102040810200000, 0x204081020400000,
    0, 0x1000000, 0x102000000, 0x10204000000, 0x1020408000000, 0x102040810000000, 0x204081020000000, 0x408102040000000,
    0, 0x100000000, 0x10200000000, 0x1020400000000, 0x102040800000000, 0x204081000000000, 0x408102000000000, 0x810204000000000,
    0, 0x10000000000, 0x1020000000000, 0x102040000000000, 0x204080000000000, 0x408100000000000, 0x810200000000000, 0x1020400000000000,
    0, 0x1000000000000, 0x102000000000000, 0x204000000000000, 0x408000000000000, 0x810000000000000, 0x1020000000000000, 0x2040000000000000,
    0, 0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000,
    0, 0, 0, 0, 0, 0, 0, 0,
  },
}

// isPinned returns if the passed piece is pinned in the passed position
func isPinned(piece Bitboard, side byte, pos *Position) bool {
  // Check if i remove the piece the king is in check
  removedPinnedPosition := pos.RemovePiece(piece)

  if removedPinnedPosition.Check(side) {
    return true
  }
  return false
}

// opponentSide returns the opposite color of the passed
func opponentSide(color byte) byte {
	if color == BLACK {
		return WHITE
	}
	return BLACK
}

// getDirection returns the direction between 2 bitboards containing only 1 piece each one
func getDirection(piece1 Bitboard, piece2 Bitboard) (dir uint64) {
	// TODO add bishop rays direction
	// Check displacement between bitboards?
	//   ------------------
	//   | <<9 | <<8 | <<7 |
	//   ------------------
	//   | <<1 |  P  | >>1 |
	//   ------------------
	//   | >>7 | >>8 | >>9 |
	//   ------------------
	filePiece1 := bits.TrailingZeros64(uint64(piece1)) / 8
	filePiece2 := bits.TrailingZeros64(uint64(piece2)) / 8
	rankPiece1 := bits.TrailingZeros64(uint64(piece1)) % 8
	rankPiece2 := bits.TrailingZeros64(uint64(piece2)) % 8
	fileDiff := filePiece1 - filePiece2
	rankDiff := rankPiece1 - rankPiece2

	switch {
	case fileDiff == 1 && rankDiff == 0:
		dir = SOUTH
	case fileDiff == -1 && rankDiff == 0:
		dir = NORTH
	case fileDiff == 0 && rankDiff == 1:
		dir = EAST
	case fileDiff == 0 && rankDiff == -1:
		dir = WEST
	}
	return
}
